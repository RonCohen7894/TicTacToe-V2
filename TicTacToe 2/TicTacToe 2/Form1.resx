<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="B_Play.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        /Rd9TNSd9o0Y+QAAAABJRU5ErkJggg==
</value>
  </data>
</root>